1.
Without let* expressions, Racket programmers could just use nested let expressions, but the result would have more parentheses.
A struct definition for a struct with n (immutable) fields adds n+2 functions to the environment
A function call always evaluates each argument exactly once, but a macro use may not evaluate each argument exactly once.

2.+ Calls to longer-strings will never terminate because there is too little thunking.

3.+ It takes a stream and returns a stream that is like the stream it takes except all #f elements are removed.


4.+ Code A evaluates e1 once whereas Code B evaluates e1 once every time the function bound to f is called

5.+ The case for mlet expressions is wrong: we do not use the correct environment to evaluate the let-expression body.

6.
(define (f1 x) (if x 37 42))
(define (f2 x) (if x x x))
(define (f5 x) (+ (car x) 42))
(define (f4 x) (car null))

7. 10/10
+ Static typing catches some simple bugs without having to test your code.
+ Static typing can produce faster code because the language implementation does not need to perform

8. 9/9
+ It is possible to define a class B such that evaluating B new m2
+ It is possible to define a class B such that evaluating B new m4

9. 4/4
+ Because the each method for the object created by MyRange.new(4,2) never calls its block.

10. 14/14
In Ruby, anything returned by a method is an object.
A Ruby mixin method included in a class can get and set instance variables of self
In Ruby, you cannot store a block in an array, but you can pass a block t

11. + Memoization
12. + Have the initialize method in class A store a copy of its argument 

13.
13.1.
10/14:
f1 {a=3, b=4, c=5}
f2 {a=3, c={x=4, y=5, z=6}, b=7}
f4 f1

13.2.
10/14
f1 {a=3, b=4, c=5}
f2 {a=3, c={x=4, y=5, z=6}, b=7}
f1 (f3 4) (* call f1 with result of call (f3 4) *)

13.3.
10/14
f1 {a=3, b=4, c=5}
f2 {a=3, c={x=4, y=5, z=6}, b=7}
f4 f1
f1 (f3 4) (* call f1 with result of call (f3 4) *)
-f4 f3